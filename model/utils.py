import argparse
from accelerate.logging import get_logger

logger = get_logger(__name__)

def parse_args(default=False):
    parser = argparse.ArgumentParser(description="Simple example of a training script.")
    parser.add_argument("--pretrained_model_hf", type=str, default="runwayml/stable-diffusion-v1-5", help="Path to pretrained model or model identifier from huggingface.co/models.")
    parser.add_argument("--revision", type=str, default=None, required=False, help="Revision of pretrained model identifier from huggingface.co/models.")
    parser.add_argument("--dataset_name", type=str, default=None, help="The name of the Dataset (from the HuggingFace hub) to train on (could be your own, possibly private, dataset). It can also be a path pointing to a local copy of a dataset in your filesystem, or to a folder containing files that ðŸ¤— Datasets can understand.")
    parser.add_argument("--output_dir", type=str, default="log/fine_generator", help="The output directory where the model predictions and checkpoints will be written.")
    parser.add_argument("--seed", type=int, default=None, help="A seed for reproducible training.")
    parser.add_argument("--train_batch_size", type=int, default=16, help="Batch size (per device) for the training dataloader.")
    parser.add_argument("--num_train_epochs", type=int, default=100)
    parser.add_argument("--max_train_steps", type=int, default=None, help="Total number of training steps to perform.  If provided, overrides num_train_epochs.")
    parser.add_argument("--gradient_accumulation_steps", type=int, default=1, help="Number of updates steps to accumulate before performing a backward/update pass.")
    parser.add_argument("--gradient_checkpointing", action="store_true", help="Whether or not to use gradient checkpointing to save memory at the expense of slower backward pass.")
    parser.add_argument("--lr", type=float, default=1e-4, help="Initial learning rate (after the potential warmup period) to use.")
    parser.add_argument("--scale_lr", action="store_true", default=False, help="Scale the learning rate by the number of GPUs, gradient accumulation steps, and batch size.")
    parser.add_argument("--lr_scheduler", type=str, default="constant", help='The scheduler type to use. Choose between ["linear", "cosine", "cosine_with_restarts", "polynomial", "constant", "constant_with_warmup"]')
    parser.add_argument("--lr_warmup_steps", type=int, default=500, help="Number of steps for the warmup in the lr scheduler.")
    parser.add_argument("--adam_beta1", type=float, default=0.9, help="The beta1 parameter for the Adam optimizer.")
    parser.add_argument("--adam_beta2", type=float, default=0.999, help="The beta2 parameter for the Adam optimizer.")
    parser.add_argument("--adam_weight_decay", type=float, default=1e-2, help="Weight decay to use.")
    parser.add_argument("--adam_epsilon", type=float, default=1e-08, help="Epsilon value for the Adam optimizer")
    parser.add_argument("--max_grad_norm", default=1.0, type=float, help="Max gradient norm.")
    parser.add_argument("--logging_dir", type=str, default="logs", help="[TensorBoard](https://www.tensorflow.org/tensorboard) log directory. Will default to *output_dir/runs/**CURRENT_DATETIME_HOSTNAME***.")
    parser.add_argument("--mixed_precision", type=str, default=None, choices=["no", "fp16", "bf16"], help="Whether to use mixed precision. Choose between fp16 and bf16 (bfloat16). Bf16 requires PyTorch >= 1.10.and an Nvidia Ampere GPU.  Default to the value of accelerate config of the current system or the flag passed with the `accelerate.launch` command. Use this argument to override the accelerate config.")
    parser.add_argument("--report_to", type=str, default=None, help='The integration to report the results and logs to. Supported platforms are `"tensorboard"` (default), `"wandb"` and `"comet_ml"`. Use `"all"` to report to all integrations.')
    parser.add_argument("--checkpointing_steps", type=int, default=500, help="Save a checkpoint of the training state every X updates. These checkpoints are only suitable for resuming training using `--resume_from_checkpoint`.")
    parser.add_argument("--resume_from_checkpoint", type=str, default=None)
    parser.add_argument("--enable_xformers_memory_efficient_attention", action="store_true", help="Whether or not to use xformers.")

    parser.add_argument("--train_text_encoder", action="store_true")
    parser.add_argument("--train_image_encoder", action="store_true")
    parser.add_argument("--keep_only_last_checkpoint", action="store_true")
    parser.add_argument("--keep_interval", type=int, default=None)
    parser.add_argument("--inference_steps", type=int, default=50)
    parser.add_argument("--guidance_scale", type=int, default=5)
    parser.add_argument("--num_images_per_description", type=int, default=1)
    parser.add_argument("--finetuned_model_path", type=str)
    parser.add_argument("--start_merge_step", type=int, default=0)
    parser.add_argument("--image_encoder_hf", type=str, default="openai/clip-vit-large-patch14")
    parser.add_argument("--img_token_num", type=int, default=1)
    parser.add_argument("--MAX_REFERENCE_ATTRIBUTE_NUM", type=int, default=4)
    parser.add_argument("--resolution", type=int, default=128)
    parser.add_argument("--image_encoder_trainable_layers", type=int, default=0)
    parser.add_argument("--load_model", type=str, default=None)
    parser.add_argument("--test_description", type=str, help="description for testing. Use  to specify image description")
    parser.add_argument("--test_reference_attribute_folder", type=str, help="folder containing reference images for testing. Name of the image should be ordered index. e.g. 0.png, 1.png, 2.png, etc.")
    parser.add_argument("--disable_flashattention", action="store_true")
    parser.add_argument("--reference_attribute_types", default=None, type=str)
    parser.add_argument("--attribute_loc", action="store_true")
    parser.add_argument("--loc_latyers", type=int, default=5)
    parser.add_argument("--attribute_loc_weight", type=float, default=0.01)
    parser.add_argument("--attribute_localization_loss", type=str, default="balanced_l1")
    parser.add_argument("--attribute_loc_norm", action="store_true")
    parser.add_argument("--unet_lr_scale", type=float, default=1.0)
    parser.add_argument("--mask_loss", action="store_true")
    parser.add_argument("--text_image_linking", type=str, default="control")
    parser.add_argument("--activate_controller", action="store_true")

    if default:
        return parser.parse_args([])

    args = parser.parse_args()

    return args

